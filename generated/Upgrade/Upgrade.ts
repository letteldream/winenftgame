// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class onUpgradeCreated extends ethereum.Event {
  get params(): onUpgradeCreated__Params {
    return new onUpgradeCreated__Params(this);
  }
}

export class onUpgradeCreated__Params {
  _event: onUpgradeCreated;

  constructor(event: onUpgradeCreated) {
    this._event = event;
  }

  get level(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Upgrade__levelsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getSupply(): BigInt {
    return this.value0;
  }

  getMaxSupply(): BigInt {
    return this.value1;
  }

  getPriceVintageWine(): BigInt {
    return this.value2;
  }

  getPriceGrape(): BigInt {
    return this.value3;
  }

  getYield(): BigInt {
    return this.value4;
  }
}

export class Upgrade__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReceiver(): Address {
    return this.value0;
  }

  getRoyaltyAmount(): BigInt {
    return this.value1;
  }
}

export class Upgrade extends ethereum.SmartContract {
  static bind(address: Address): Upgrade {
    return new Upgrade("Upgrade", address);
  }

  BASE_URI(): string {
    let result = super.call("BASE_URI", "BASE_URI():(string)", []);

    return result[0].toString();
  }

  try_BASE_URI(): ethereum.CallResult<string> {
    let result = super.tryCall("BASE_URI", "BASE_URI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  LP_TAX_PERCENT(): BigInt {
    let result = super.call("LP_TAX_PERCENT", "LP_TAX_PERCENT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_LP_TAX_PERCENT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LP_TAX_PERCENT",
      "LP_TAX_PERCENT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLevel(_tokenId: BigInt): BigInt {
    let result = super.call("getLevel", "getLevel(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getLevel(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLevel", "getLevel(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getYield(_tokenId: BigInt): BigInt {
    let result = super.call("getYield", "getYield(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getYield(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getYield", "getYield(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(_owner: Address, _operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    _owner: Address,
    _operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  levels(param0: BigInt): Upgrade__levelsResult {
    let result = super.call(
      "levels",
      "levels(uint256):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Upgrade__levelsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_levels(param0: BigInt): ethereum.CallResult<Upgrade__levelsResult> {
    let result = super.tryCall(
      "levels",
      "levels(uint256):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Upgrade__levelsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  mintingStarted(): boolean {
    let result = super.call("mintingStarted", "mintingStarted():(bool)", []);

    return result[0].toBoolean();
  }

  try_mintingStarted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("mintingStarted", "mintingStarted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  royaltiesAddress(): Address {
    let result = super.call(
      "royaltiesAddress",
      "royaltiesAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_royaltiesAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "royaltiesAddress",
      "royaltiesAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyInfo(tokenId: BigInt, value: BigInt): Upgrade__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return new Upgrade__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    tokenId: BigInt,
    value: BigInt
  ): ethereum.CallResult<Upgrade__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Upgrade__royaltyInfoResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  startTime(): BigInt {
    let result = super.call("startTime", "startTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startTime", "startTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  upgradesMinted(): BigInt {
    let result = super.call("upgradesMinted", "upgradesMinted():(uint256)", []);

    return result[0].toBigInt();
  }

  try_upgradesMinted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "upgradesMinted",
      "upgradesMinted():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wineryAddress(): Address {
    let result = super.call("wineryAddress", "wineryAddress():(address)", []);

    return result[0].toAddress();
  }

  try_wineryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "wineryAddress",
      "wineryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _vintageWine(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _grape(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _BASE_URI(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLevelCall extends ethereum.Call {
  get inputs(): AddLevelCall__Inputs {
    return new AddLevelCall__Inputs(this);
  }

  get outputs(): AddLevelCall__Outputs {
    return new AddLevelCall__Outputs(this);
  }
}

export class AddLevelCall__Inputs {
  _call: AddLevelCall;

  constructor(call: AddLevelCall) {
    this._call = call;
  }

  get _maxSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _priceVintageWine(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _priceGrape(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _yield(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddLevelCall__Outputs {
  _call: AddLevelCall;

  constructor(call: AddLevelCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ChangeLevelCall extends ethereum.Call {
  get inputs(): ChangeLevelCall__Inputs {
    return new ChangeLevelCall__Inputs(this);
  }

  get outputs(): ChangeLevelCall__Outputs {
    return new ChangeLevelCall__Outputs(this);
  }
}

export class ChangeLevelCall__Inputs {
  _call: ChangeLevelCall;

  constructor(call: ChangeLevelCall) {
    this._call = call;
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _priceVintageWine(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _priceGrape(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _yield(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ChangeLevelCall__Outputs {
  _call: ChangeLevelCall;

  constructor(call: ChangeLevelCall) {
    this._call = call;
  }
}

export class ForwardERC20sCall extends ethereum.Call {
  get inputs(): ForwardERC20sCall__Inputs {
    return new ForwardERC20sCall__Inputs(this);
  }

  get outputs(): ForwardERC20sCall__Outputs {
    return new ForwardERC20sCall__Outputs(this);
  }
}

export class ForwardERC20sCall__Inputs {
  _call: ForwardERC20sCall;

  constructor(call: ForwardERC20sCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get target(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ForwardERC20sCall__Outputs {
  _call: ForwardERC20sCall;

  constructor(call: ForwardERC20sCall) {
    this._call = call;
  }
}

export class MintUpgradeCall extends ethereum.Call {
  get inputs(): MintUpgradeCall__Inputs {
    return new MintUpgradeCall__Inputs(this);
  }

  get outputs(): MintUpgradeCall__Outputs {
    return new MintUpgradeCall__Outputs(this);
  }
}

export class MintUpgradeCall__Inputs {
  _call: MintUpgradeCall;

  constructor(call: MintUpgradeCall) {
    this._call = call;
  }

  get _level(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _qty(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintUpgradeCall__Outputs {
  _call: MintUpgradeCall;

  constructor(call: MintUpgradeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get _BASE_URI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetGrapeCall extends ethereum.Call {
  get inputs(): SetGrapeCall__Inputs {
    return new SetGrapeCall__Inputs(this);
  }

  get outputs(): SetGrapeCall__Outputs {
    return new SetGrapeCall__Outputs(this);
  }
}

export class SetGrapeCall__Inputs {
  _call: SetGrapeCall;

  constructor(call: SetGrapeCall) {
    this._call = call;
  }

  get _grape(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGrapeCall__Outputs {
  _call: SetGrapeCall;

  constructor(call: SetGrapeCall) {
    this._call = call;
  }
}

export class SetRoyaltiesAddressCall extends ethereum.Call {
  get inputs(): SetRoyaltiesAddressCall__Inputs {
    return new SetRoyaltiesAddressCall__Inputs(this);
  }

  get outputs(): SetRoyaltiesAddressCall__Outputs {
    return new SetRoyaltiesAddressCall__Outputs(this);
  }
}

export class SetRoyaltiesAddressCall__Inputs {
  _call: SetRoyaltiesAddressCall;

  constructor(call: SetRoyaltiesAddressCall) {
    this._call = call;
  }

  get _royaltiesAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRoyaltiesAddressCall__Outputs {
  _call: SetRoyaltiesAddressCall;

  constructor(call: SetRoyaltiesAddressCall) {
    this._call = call;
  }
}

export class SetRoyaltiesFeesCall extends ethereum.Call {
  get inputs(): SetRoyaltiesFeesCall__Inputs {
    return new SetRoyaltiesFeesCall__Inputs(this);
  }

  get outputs(): SetRoyaltiesFeesCall__Outputs {
    return new SetRoyaltiesFeesCall__Outputs(this);
  }
}

export class SetRoyaltiesFeesCall__Inputs {
  _call: SetRoyaltiesFeesCall;

  constructor(call: SetRoyaltiesFeesCall) {
    this._call = call;
  }

  get _royaltiesFees(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRoyaltiesFeesCall__Outputs {
  _call: SetRoyaltiesFeesCall;

  constructor(call: SetRoyaltiesFeesCall) {
    this._call = call;
  }
}

export class SetStartTimeCall extends ethereum.Call {
  get inputs(): SetStartTimeCall__Inputs {
    return new SetStartTimeCall__Inputs(this);
  }

  get outputs(): SetStartTimeCall__Outputs {
    return new SetStartTimeCall__Outputs(this);
  }
}

export class SetStartTimeCall__Inputs {
  _call: SetStartTimeCall;

  constructor(call: SetStartTimeCall) {
    this._call = call;
  }

  get _startTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStartTimeCall__Outputs {
  _call: SetStartTimeCall;

  constructor(call: SetStartTimeCall) {
    this._call = call;
  }
}

export class SetVintageWineCall extends ethereum.Call {
  get inputs(): SetVintageWineCall__Inputs {
    return new SetVintageWineCall__Inputs(this);
  }

  get outputs(): SetVintageWineCall__Outputs {
    return new SetVintageWineCall__Outputs(this);
  }
}

export class SetVintageWineCall__Inputs {
  _call: SetVintageWineCall;

  constructor(call: SetVintageWineCall) {
    this._call = call;
  }

  get _vintageWine(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVintageWineCall__Outputs {
  _call: SetVintageWineCall;

  constructor(call: SetVintageWineCall) {
    this._call = call;
  }
}

export class SetWineryAddressCall extends ethereum.Call {
  get inputs(): SetWineryAddressCall__Inputs {
    return new SetWineryAddressCall__Inputs(this);
  }

  get outputs(): SetWineryAddressCall__Outputs {
    return new SetWineryAddressCall__Outputs(this);
  }
}

export class SetWineryAddressCall__Inputs {
  _call: SetWineryAddressCall;

  constructor(call: SetWineryAddressCall) {
    this._call = call;
  }

  get _wineryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWineryAddressCall__Outputs {
  _call: SetWineryAddressCall;

  constructor(call: SetWineryAddressCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
